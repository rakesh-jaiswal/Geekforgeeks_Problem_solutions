class Solution{
public:

  int t[501][501];
    
    bool ispalindrome(string s,int i,int j){
        if(s.size()==0||i==j)return true;
        while(i<j){
            if(s[i]!=s[j])return false;
            i++;
            j--;
        }
        return true;
    }
    
     int solve(string s,int i,int j){
        if(i>=j)
            return 0;
         if(ispalindrome(s,i,j)==true)
             return 0;
         if(t[i][j]!=-1)
             return t[i][j];
         int mn=INT_MAX;
         for(int k=i;k<=j-1;k++){
             int left,right;
             if(t[i][k]!=-1)
             left=t[i][k];
             else{
             left=solve(s,i,k);
             t[i][k]=left;
             }
             if(t[k+1][j]!=-1)
             right=t[k+1][j];
             else{
              right=solve(s,k+1,j);
              t[k+1][j]=right;
             }
             int temp=1+left+right;
             mn=min(temp,mn);
             
         }
         return t[i][j]=mn;
     }

    int palindromicPartition(string s)
    {
        // code here
         memset(t,-1,sizeof(t));
        int n=s.size();
        int i=0,j=n-1;
        return solve(s,i,j);
        
    }
};
