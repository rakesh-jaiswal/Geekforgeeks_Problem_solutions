class Solution{
	public:
	vector<int> LIS(vector<int>&nums,vector<int>&lis){
	    int n=nums.size();
	   // int res=INT_MIN;
	    lis[0]=1;
	    for(int i=1;i<n;i++){
	        lis[i]=1;
	        for(int j=0;j<i;j++){
	            if(nums[j]<nums[i]){
	            lis[i]=max(lis[i],lis[j]+1);
	           // res=max(res,lis[i]);
	            }
	        }
	    }
	    return lis;
	}
	
	vector<int> LDS(vector<int>&nums,vector<int>&lds){
	    int n=nums.size();
	   // int res=INT_MIN;
	    lds[n-1]=1;
	    for(int i=n-2;i>=0;i--){
	        lds[i]=1;
	        for(int j=n-1;j>i;j--){
	            if(nums[j]<nums[i]){
	            lds[i]=max(lds[i],lds[j]+1);
	           // res=max(res,lis[i]);
	            }
	        }
	    }
	    return lds;
	}
	
	int LongestBitonicSequence(vector<int>nums)
	{
	    // code here
	    int n=nums.size();
	    vector<int >lis(n);
	    vector<int>lds(n);
	    LIS(nums,lis);
	    LDS(nums,lds);
	    int bitseq=INT_MIN;
	    for(int i=0;i<n;i++){
	        bitseq=max(bitseq,lis[i]+lds[i]-1);
	    }
	    return bitseq;
	    
	}
};
